"use strict";function buildJSONRPCRequest(e,r,t){const o={jsonrpc:"2.0",id:e,method:r,params:t};return validateJSONRPCRequest(o),o}function buildJSONRPCResult(e,r){const t={jsonrpc:"2.0",id:e,result:r};return validateJSONRPCResponse(t),t}function buildJSONRPCError(e=null,r){void 0===r&&(r=createJSONRPCError(-32603,"'err' parameter is missing"));const t={code:r.jsonRPCErrorCode||1,message:r.message,data:{}};for(const e of Object.keys(r))"jsonRPCErrorCode"!==e&&"message"!==e&&(t.data[e]=r[e]);return{jsonrpc:"2.0",error:t,id:e}}function validateJSONRPCRequest({jsonrpc:e,method:r,id:t,params:o}){if(validateJSONRPCAttribute(e),!r)throw createJSONRPCError(-32600,"'method' attribute is missing");if("string"!=typeof r)throw createJSONRPCError(-32600,"'method' attribute must be a string");if(validateJSONRPCIdAttribute(t),!(void 0===o||Array.isArray(o)||null!==o&&"object"==typeof o))throw createJSONRPCError(-32602,"'params' attribute must be an array, an object or undefined")}function validateJSONRPCResponse({jsonrpc:e,result:r,error:t,id:o}){if(validateJSONRPCAttribute(e),void 0!==r&&void 0!==t)throw createJSONRPCError(-32603,"A JSON-RPC response cannot have both a 'result' and 'error' attribute");if(void 0!==t){if(!t.code||"number"!=typeof t.code)throw createJSONRPCError(-32603,"A JSON-RPC error response must have a 'code' attribute");if(!t.message||"string"!=typeof t.message)throw createJSONRPCError(-32603,"A JSON-RPC error response must have a 'message' attribute")}validateJSONRPCIdAttribute(o)}function validateJSONRPCAttribute(e){if(!e)throw createJSONRPCError(-32600,"'jsonrpc' attribute is missing");if("2.0"!==e)throw createJSONRPCError(-32600,"'jsonrpc' attribute value must be '2.0'")}function validateJSONRPCIdAttribute(e){if(null!==e&&"number"!=typeof e&&"string"!=typeof e)throw createJSONRPCError(-32600,"'id' attribute must be a number, a string or null")}Object.defineProperty(exports,"__esModule",{value:!0});const errors={"-32700":"Parse error","-32600":"Invalid request","-32601":"Method not found","-32602":"Invalid params","-32603":"Internal error"};function createJSONRPCError(e,r){if(r||(r=errors[String(e)]),!r)return createJSONRPCError(-32603);const t=new Error(r);return t.jsonRPCErrorCode=e,t}function _extends(){return(_extends=Object.assign||function(e){for(var r=1;r<arguments.length;r++){var t=arguments[r];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function postJSON(e,r,{timeout:t}={}){return new Promise((o,n)=>{const{parse:s}=require("url"),i=s(e),a=JSON.stringify(r);let u;if("http:"===i.protocol)u="http";else{if("https:"!==i.protocol)throw new Error(`Unsupported URL protocol (${i.protocol})`);u="https"}u=require(u);const c=_extends({},i,{method:"POST",headers:{"Content-Type":"application/json","Content-Length":a.length,Connection:"keep-alive"},timeout:t}),d=u.request(c,e=>{let r="";e.setEncoding("utf8"),e.on("data",e=>{r+=e}),e.on("end",()=>{const t=e.statusCode;200===t||201===t||204===t?o(JSON.parse(r)):n(new Error(`Unexpected ${t} HTTP status`))})});d.on("error",e=>{n(e)}),d.on("timeout",()=>{n(new Error("HTTP request timed out"))}),d.write(a),d.end()})}function postJSON$1(e,r,{timeout:t}={}){return new Promise((o,n)=>{const s=new XMLHttpRequest;s.open("POST",e,!0),s.setRequestHeader("Content-Type","application/json"),s.onload=(()=>{200===s.status||201===s.status||204===s.status?o(JSON.parse(s.responseText)):n(new Error(`Unexpected ${s.status} HTTP status`))}),s.onerror=(()=>{n(new Error("HTTP request failed"))}),s.ontimeout=(()=>{n(new Error("HTTP request timed out"))}),t&&(s.timeout=t),s.send(JSON.stringify(r))})}function postJSON$2(e,r,{timeout:t}={}){return("undefined"==typeof XMLHttpRequest?postJSON:postJSON$1)(e,r,{timeout:t})}function _extends$1(){return(_extends$1=Object.assign||function(e){for(var r=1;r<arguments.length;r++){var t=arguments[r];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function createClientError(e="Unknown client error",r){return _createError(e,_extends$1({},r,{$isClientError:!0}))}function createRemoteError(e="Unknown remote error",r){return _createError(e,_extends$1({},r,{$isRemoteError:!0}))}function isClientError(e){return Boolean(e&&e.$isClientError)}function isServerError(e){return Boolean(e&&e.$isServerError)}function _createError(e,r){const t=e instanceof Error?e:new Error(e);return Object.assign(t,r),t}function _asyncToGenerator(e){return function(){var r=this,t=arguments;return new Promise(function(o,n){var s=e.apply(r,t);function step(e,r){try{var t=s[e](r),i=t.value}catch(e){return void n(e)}t.done?o(i):Promise.resolve(i).then(_next,_throw)}function _next(e){step("next",e)}function _throw(e){step("throw",e)}_next()})}}const INVOKE_METHOD_VERSION=1;class RemoteResource{static $import(e){if(!e)throw createClientError("'specifier' argument is missing");if("string"!=typeof e)throw createClientError("'specifier' argument must be a string");if(!e.match(/^https?:\/\//i))throw createClientError("Sorry, only HTTP(S) specifiers are supported");const r=e,t=new Proxy({},{get(e,t){if("then"!==t)return"_$isRemote"===t||(e[t]||(e[t]=function(){var e=_asyncToGenerator(function*(e,o){const{output:n}=yield invoke({endpoint:r,method:"invoke",params:{name:t,input:e,environment:o,version:INVOKE_METHOD_VERSION}});return n});return function(r,t){return e.apply(this,arguments)}}()),e[t])}});return Promise.resolve(t)}}function invoke(e){return _invoke.apply(this,arguments)}function _invoke(){return(_invoke=_asyncToGenerator(function*({endpoint:e,method:r,params:t,timeout:o}){const n=Math.floor(Math.random()*(Number.MAX_SAFE_INTEGER-1))+1,s=yield postJSON$2(e,buildJSONRPCRequest(n,r,t),{timeout:o});if(s.jsonrpc){if(validateJSONRPCResponse(s),s.id!==n)throw new Error("Request 'id' and response 'id' do not match while invoking a remote method");if(s.error)throw createRemoteError(s.error.message,s.error.data);return s.result}if(s.errorMessage)throw createRemoteError(s.errorMessage);throw new Error("An unknown error occurred while invoking a remote method")})).apply(this,arguments)}function _asyncToGenerator$1(e){return function(){var r=this,t=arguments;return new Promise(function(o,n){var s=e.apply(r,t);function step(e,r){try{var t=s[e](r),i=t.value}catch(e){return void n(e)}t.done?o(i):Promise.resolve(i).then(_next,_throw)}function _next(e){step("next",e)}function _throw(e){step("throw",e)}_next()})}}const INVOKE_METHOD_VERSION$1=1;class RemoteResourceJSONRPCHandler{constructor({resource:e,publicMethods:r}){this.resource=e,this.publicMethods=r}handleRequest(e,{awsRequestId:r}={}){var t=this;return _asyncToGenerator$1(function*(){try{if(validateJSONRPCRequest(e),"invoke"!==e.method)throw createJSONRPCError(-32601);const{name:o,input:n,environment:s,version:i}=e.params||{};if(!o)throw createClientError("Method name is missing");if(void 0===i)throw createClientError("'invoke' method version is missing");if(i!==INVOKE_METHOD_VERSION$1)throw createClientError(`'invoke' method version ${i} is unsupported`);if(!t.publicMethods.includes(o))throw createClientError(`Remote method '${o}' doesn't exist`);let a=yield t.resource[o](n,s);return a&&a.$serialize&&(a=a.$serialize()),buildJSONRPCResult(e.id,{output:a})}catch(t){let o=t;if(!(t.jsonRPCErrorCode||isClientError(t)||isServerError(t))){if(r){let e=t.stack||t.message;e=(e=e.replace(/\s+/g," ")).trim(),console.log("[ERROR] "+e)}else console.error(t);let e="An error occurred while running a resource method remotely";r&&(e+=` (awsRequestId: '${r}')`),o=createJSONRPCError(-1,e)}return buildJSONRPCError(e.id,o)}})()}}function _extends$2(){return(_extends$2=Object.assign||function(e){for(var r=1;r<arguments.length;r++){var t=arguments[r];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}let jsonRPCHandler;function handler(e,r,t){r.callbackWaitsForEmptyEventLoop=!1,jsonRPCHandler.handleRequest(e,{awsRequestId:r.awsRequestId}).then(e=>{t(null,e)}).catch(t)}(()=>{const e=require("./definition.json");let r=require("./builder");r.default&&(r=r.default);const t=r(RemoteResource),o=_extends$2({},e.attributes,t);jsonRPCHandler=new RemoteResourceJSONRPCHandler({resource:o,publicMethods:e.methods})})(),exports.handler=handler;
